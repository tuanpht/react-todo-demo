{"version":3,"sources":["serviceWorker.js","apis/todos.js","constants/FilterTypes.js","reducers/initialState.js","reducers/index.js","reducers/todos.js","reducers/filterTodos.js","store.js","containers/AddTodo.js","actions/todos.js","components/Todo.js","containers/EditableTodo.js","containers/FilteredTodos.js","components/TodoList.js","containers/FilterButtons.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","getTodos","JSON","parse","localStorage","getItem","apis_todos","todo","todos","todoId","id","lastTodo","length","map","oldTodo","Object","objectSpread","push","setItem","stringify","oldTodosCount","filter","FilterTypes","initialState","filterType","combineReducers","arguments","undefined","action","type","TodoApi","text","completed","toConsumableArray","concat","createStore","reducers","connect","_ref","dispatch","react_default","a","createElement","onSubmit","e","preventDefault","input","currentTarget","value","trim","FormControl_default","fullWidth","InputLabel_default","htmlFor","Input_default","required","variant","name","endAdornment","InputAdornment_default","position","IconButton_default","AddCircleOutline_default","Todo","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","confirmDialogOpened","isEditing","todoText","todoInput","React","createRef","openConfirmDialog","bind","assertThisInitialized","closeConfirmDialog","editTodo","cancelEdit","handleEditTodo","handleCheckboxClick","setState","_this2","current","focus","event","keyCode","newText","onEdit","onClick","stopPropagation","Fragment","ListItem_default","dense","button","Checkbox_default","checked","tabIndex","disableRipple","TextField_default","defaultValue","inputRef","onBlur","onKeyDown","ListItemText_default","primary","ListItemSecondaryAction_default","aria-label","Close_default","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","List_default","selected","DialogActions_default","Button_default","color","onClickDelete","autoFocus","Component","withMobileDialog","components_Todo","key","toggleTodo","deleteTodo","filterTodos","containers_EditableTodo","filterTodo","FormGroup_default","row","RadioGroup_default","onChange","FormControlLabel_default","label","control","Radio_default","disabled","icon","FilterList_default","withStyles","theme","paper","padding","spacing","unit","marginTop","classes","CssBaseline_default","AppBar_default","Toolbar_default","Typography_default","Grid_default","container","direction","justify","alignItems","item","xs","md","lg","Paper_default","className","containers_AddTodo","FilterButtons","FilteredTodos","ReactDOM","render","es","store","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wFClBAC,EAAW,WACb,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAiCzCC,EA9BE,SAAAC,GACb,IAAIC,EAAQP,IACRQ,EAASF,EAAKG,GACdC,EAAWH,EAAMA,EAAMI,OAAS,GAepC,OAdKH,EAKDD,EAAQA,EAAMK,IAAI,SAAAC,GACd,OAAIA,EAAQJ,KAAOH,EAAKG,GACbK,OAAAC,EAAA,EAAAD,CAAA,GAAID,EAAYP,GAEpBO,KARXL,EAASE,GAAYA,EAASD,GAAKC,EAASD,GAAK,EAAI,EACrDH,EAAKG,GAAKD,EACVD,EAAMS,KAAKV,IASfH,aAAac,QAAQ,QAAShB,KAAKiB,UAAUX,IAEtCD,GAYID,EATI,SAAAI,GACf,IAAIF,EAAQP,IACRmB,EAAgBZ,EAAMI,OAI1B,OAHAJ,EAAQA,EAAMa,OAAO,SAAAd,GAAI,OAAIA,EAAKG,KAAOA,IACzCN,aAAac,QAAQ,QAAShB,KAAKiB,UAAUX,IAEtCY,IAAkBZ,EAAMI,QC/BpBU,EACN,WADMA,EAEA,iBAFAA,EAGH,cCAGC,EAAA,CACXf,MF+BKP,IE9BLuB,WAAYF,GCDDG,cAAgB,CAC3BjB,MCFJ,WAAuD,IAC/CD,EADQC,EAAuCkB,UAAAd,OAAA,QAAAe,IAAAD,UAAA,GAAAA,UAAA,GAA/BH,EAAaf,MAAOoB,EAAWF,UAAAd,OAAA,EAAAc,UAAA,QAAAC,EAEnD,OAAQC,EAAOC,MACX,IAAK,MAOD,OANAtB,EAAOuB,EAAa,CAChBpB,GAAI,KACJqB,KAAMH,EAAOG,KACbC,WAAW,IAGRjB,OAAAkB,EAAA,EAAAlB,CACAP,GADP0B,OAAA,CAEI3B,IAGR,IAAK,OAOD,OANAA,EAAOuB,EAAa,CAChBpB,GAAIkB,EAAOlB,GACXqB,KAAMH,EAAOG,KACbC,WAAW,IAGRxB,EAAMK,IACT,SAAAC,GACI,OAAOA,EAAQJ,KAAOH,EAAKG,GAApBK,OAAAC,EAAA,EAAAD,CAAA,GAA6BD,EAAYP,GAAQO,IAIpE,IAAK,SAGD,OAFcgB,EAAeF,EAAOlB,IAGzBF,EAAMa,OAAO,SAAAd,GAAI,OAAIA,EAAKG,KAAOkB,EAAOlB,KAG5CF,EAEX,IAAK,gBACD,OAAOA,EAAMK,IACT,SAAAC,GACI,IAAIP,EAAOO,EAAQJ,KAAOkB,EAAOlB,GAAtBK,OAAAC,EAAA,EAAAD,CAAA,GAA+BD,EAA/B,CAAwCkB,WAAYlB,EAAQkB,YAAalB,EAGpF,OAFAgB,EAAavB,GAENA,IAGnB,QACI,OAAOC,ID5CfgB,WEJW,WAAkD,IAAjDA,EAAiDE,UAAAd,OAAA,QAAAe,IAAAD,UAAA,GAAAA,UAAA,GAApCH,EAAaC,WAAYI,EAAWF,UAAAd,OAAA,EAAAc,UAAA,QAAAC,EAC7D,OAAQC,EAAOC,MACX,IAAK,SACD,OAAOD,EAAOJ,WAElB,QACI,OAAOA,MCLJW,cAAYC,mHCsCZC,gBA/BC,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACf,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAU,SAAAC,GACZA,EAAEC,iBACF,IAAIC,EAAQF,EAAEG,cAAcxC,KACvBuC,EAAME,MAAMC,SAGjBV,EClBoB,CAC5BV,KAAM,MACNE,KDgByBe,EAAME,QACvBF,EAAME,MAAQ,MAEdR,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAaU,WAAS,GAClBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAYY,QAAQ,cAApB,YACAb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACIc,UAAQ,EACRC,QAAQ,WACR9C,GAAG,aACH+C,KAAK,OACLC,aACIlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAgBmB,SAAS,OACrBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYZ,KAAK,UACbW,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,+UEd1BsB,eACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAlD,OAAAmD,EAAA,EAAAnD,CAAAoD,KAAAJ,IACfE,EAAAlD,OAAAqD,EAAA,EAAArD,CAAAoD,KAAApD,OAAAsD,EAAA,EAAAtD,CAAAgD,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACTC,qBAAqB,EACrBC,WAAW,EACXC,SAAUV,EAAMjC,MAGpBkC,EAAKU,UAAYC,IAAMC,YAEvBZ,EAAKa,kBAAoBb,EAAKa,kBAAkBC,KAAvBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KACzBA,EAAKgB,mBAAqBhB,EAAKgB,mBAAmBF,KAAxBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KAC1BA,EAAKiB,SAAWjB,EAAKiB,SAASH,KAAdhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KAChBA,EAAKkB,WAAalB,EAAKkB,WAAWJ,KAAhBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KAClBA,EAAKmB,eAAiBnB,EAAKmB,eAAeL,KAApBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KACtBA,EAAKoB,oBAAsBpB,EAAKoB,oBAAoBN,KAAzBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAkD,KAfZA,mFAmBfE,KAAKmB,SAAS,CAACd,qBAAqB,iDAIpCL,KAAKmB,SAAS,CAACd,qBAAqB,uCAG7B,IAAAe,EAAApB,KACPA,KAAKmB,SAAS,CAAEb,WAAW,GAAQ,kBAAMc,EAAKZ,UAAUa,QAAQC,+CAIhEtB,KAAKmB,SAAS,CACVZ,SAAUP,KAAKH,MAAMjC,KACrB0C,WAAW,IAEfN,KAAKQ,UAAUa,QAAQxC,MAAQmB,KAAKH,MAAMjC,4CAG/B2D,GAEX,GAAsB,KAAlBA,EAAMC,QACNxB,KAAKgB,kBAEF,GAAsB,KAAlBO,EAAMC,QAAgB,CAC7B,IAAIC,EAAUzB,KAAKQ,UAAUa,QAAQxC,MACrCmB,KAAKH,MAAM6B,OAAOD,GAClBzB,KAAKmB,SAAS,CACVZ,SAAUkB,EACVnB,WAAW,iDAKHiB,GAChBvB,KAAKH,MAAM8B,UACXJ,EAAMK,mDAIN,OACIvD,EAAAC,EAAAC,cAACF,EAAAC,EAAMuD,SAAP,KACIxD,EAAAC,EAAAC,cAACuD,EAAAxD,EAAD,CAAUyD,OAAK,EAACC,QAAM,EAACL,QAAS3B,KAAKe,UACjC1C,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CACI4D,QAASlC,KAAKH,MAAMhC,UACpB8D,QAAS3B,KAAKkB,oBACdiB,UAAW,EACXC,eAAa,IAEfpC,KAAKI,MAAME,UACPjC,EAAAC,EAAAC,cAAC8D,GAAA/D,EAAD,CACEU,WAAS,EACTsD,aAActC,KAAKI,MAAMG,SACzBgC,SAAUvC,KAAKQ,UACfgC,OAAQxC,KAAKgB,WACbyB,UAAWzC,KAAKiB,iBAClB5C,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CAAcqE,QAAS3C,KAAKI,MAAMG,WACxClC,EAAAC,EAAAC,cAACqE,EAAAtE,EAAD,KACID,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYuE,aAAW,SAASlB,QAAS3B,KAAKW,mBAC1CtC,EAAAC,EAAAC,cAACuE,EAAAxE,EAAD,SAIZD,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CACI0E,KAAMhD,KAAKI,MAAMC,oBACjB4C,QAASjD,KAAKc,mBACdoC,kBAAgB,2BAEhB7E,EAAAC,EAAAC,cAAC4E,GAAA7E,EAAD,CAAa/B,GAAG,2BAAhB,gBACA8B,EAAAC,EAAAC,cAAC6E,GAAA9E,EAAD,KACID,EAAAC,EAAAC,cAAC8E,GAAA/E,EAAD,mDAGAD,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,KACID,EAAAC,EAAAC,cAACuD,EAAAxD,EAAD,CAAUyD,OAAK,EAACC,QAAM,EAACuB,UAAQ,GAC1BvD,KAAKI,MAAMG,YAIxBlC,EAAAC,EAAAC,cAACiF,GAAAlF,EAAD,KACID,EAAAC,EAAAC,cAACkF,GAAAnF,EAAD,CAAQqD,QAAS3B,KAAKc,mBAAoB4C,MAAM,WAAhD,UAGArF,EAAAC,EAAAC,cAACkF,GAAAnF,EAAD,CAAQqD,QAAS3B,KAAKH,MAAM8D,cAAeD,MAAM,YAAYE,WAAS,GAAtE,iBAvGLnD,IAAMoD,WAiHVC,UAAmBlE,IClHnB1B,iBAXM,SAAAC,GAAA,IAAG5B,EAAH4B,EAAG5B,GAAIqB,EAAPO,EAAOP,KAAMC,EAAbM,EAAaN,UAAWO,EAAxBD,EAAwBC,SAAxB,OACjBC,EAAAC,EAAAC,cAACwF,GAAD,CAAMC,IAAKzH,EACPA,GAAIA,EACJqB,KAAMA,EACNC,UAAWA,EACX8D,QAAS,kBAAMvD,EFCG,SAAA7B,GAAE,MAAK,CAC7BmB,KAAM,gBACNnB,MEH4B0H,CAAW1H,KACnCoH,cAAe,kBAAMvF,EFKH,SAAA7B,GAAE,MAAK,CAC7BmB,KAAM,SACNnB,MEPkC2H,CAAW3H,KACzCmF,OAAQ,SAAAD,GAAO,OAAIrD,EFPH,SAAC7B,EAAIqB,GAAL,MAAe,CACnCF,KAAM,OACNnB,KACAqB,QEIgCmD,CAASxE,EAAIkF,SCOlCvD,eAJS,SAAAkC,GAAK,MAAK,CAC9B/D,MAZgB,SAACA,EAAOgB,GACxB,OAAQA,GACJ,KAAKF,EACD,OAAOd,EAAMa,OAAO,SAAAd,GAAI,OAAKA,EAAKyB,YACtC,KAAKV,EACD,OAAOd,EAAMa,OAAO,SAAAd,GAAI,OAAIA,EAAKyB,YACrC,QACI,OAAOxB,GAKR8H,CAAY/D,EAAM/D,MAAO+D,EAAM/C,cAG3Ba,CCfA,SAAAC,GAAA,IAAG9B,EAAH8B,EAAG9B,MAAH,OACXgC,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,KACKjC,EAAMK,IAAI,SAAAN,GAAI,OACXiC,EAAAC,EAAAC,cAAC6F,GAAD,CAAMJ,IAAK5H,EAAKG,GACZA,GAAIH,EAAKG,GACTqB,KAAMxB,EAAKwB,KACXC,UAAWzB,EAAKyB,2PCkCjBK,eARS,SAAAkC,GAAK,MAAK,CAC9B/C,WAAY+C,EAAM/C,aAGK,SAAAe,GAAQ,MAAK,CACpCuD,QAAS,SAACtE,GAAD,OAAgBe,ELpBH,SAAAf,GAAU,MAAK,CACrCK,KAAM,SACNL,cKkBkCgH,CAAWhH,OAGlCa,CAlCM,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,WAAYsE,EAAfxD,EAAewD,QAAf,OACjBtD,EAAAC,EAAAC,cAAC+F,GAAAhG,EAAD,CAAWiG,KAAG,GACVlG,EAAAC,EAAAC,cAACiG,GAAAlG,EAAD,CAAYiG,KAAG,EAACE,SAAU,SAAChG,EAAGI,GAAJ,OAAc8C,EAAQ9C,IAAQA,MAAOxB,GAC3DgB,EAAAC,EAAAC,cAACmG,GAAApG,EAAD,CACIqG,MAAM,SACNC,QAASvG,EAAAC,EAAAC,cAACsG,GAAAvG,EAAD,CAAOwG,UAAQ,EAACC,KAAM1G,EAAAC,EAAAC,cAACyG,GAAA1G,EAAD,UAEnCD,EAAAC,EAAAC,cAACmG,GAAApG,EAAD,CACIO,MAAO1B,EACPyH,QAASvG,EAAAC,EAAAC,cAACsG,GAAAvG,EAAD,MACTqG,MAAM,QAEVtG,EAAAC,EAAAC,cAACmG,GAAApG,EAAD,CACIO,MAAO1B,EACPyH,QAASvG,EAAAC,EAAAC,cAACsG,GAAAvG,EAAD,MACTqG,MAAM,WAEVtG,EAAAC,EAAAC,cAACmG,GAAApG,EAAD,CACIO,MAAO1B,EACPyH,QAASvG,EAAAC,EAAAC,cAACsG,GAAAvG,EAAD,MACTqG,MAAM,kBCYPM,yBA9BA,SAAAC,GAAK,MAAK,CACrBC,MAAO,CACHC,QAA8B,EAArBF,EAAMG,QAAQC,KACvBC,UAAW,UA2BJN,CAtBH,SAAA9G,GAAA,IAAGqH,EAAHrH,EAAGqH,QAAH,OACRnH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkH,GAAAnH,EAAD,MACAD,EAAAC,EAAAC,cAACmH,GAAApH,EAAD,CAAQmB,SAAS,UACbpB,EAAAC,EAAAC,cAACoH,GAAArH,EAAD,CAASe,QAAQ,SACbhB,EAAAC,EAAAC,cAACqH,GAAAtH,EAAD,CAAYe,QAAQ,KAAKqE,MAAM,WAA/B,eAKRrF,EAAAC,EAAAC,cAACsH,GAAAvH,EAAD,CAAMwH,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACxD5H,EAAAC,EAAAC,cAACsH,GAAAvH,EAAD,CAAM4H,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BhI,EAAAC,EAAAC,cAAC+H,GAAAhI,EAAD,CAAOiI,UAAWf,EAAQL,OACtB9G,EAAAC,EAAAC,cAACiI,EAAD,MACAnI,EAAAC,EAAAC,cAACkI,GAAD,MACApI,EAAAC,EAAAC,cAACmI,GAAD,mBC3BpBC,IAASC,OACLvI,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAUC,MAAOA,GACbzI,EAAAC,EAAAC,cAACwI,GAAD,OAEJC,SAASC,eAAe,ShBqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e0335a3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const getTodos = () => {\n    return JSON.parse(localStorage.getItem('todos')) || []\n}\n\nconst saveTodo = todo => {\n    let todos = getTodos()\n    let todoId = todo.id\n    let lastTodo = todos[todos.length - 1]\n    if (!todoId) {\n        todoId = lastTodo && lastTodo.id ? lastTodo.id + 1 : 1\n        todo.id = todoId\n        todos.push(todo)\n    } else {\n        todos = todos.map(oldTodo => {\n            if (oldTodo.id === todo.id) {\n                return {...oldTodo, ...todo}\n            }\n            return oldTodo\n        })\n    }\n    localStorage.setItem('todos', JSON.stringify(todos))\n\n    return todo\n}\n\nconst deleteTodo = id => {\n    let todos = getTodos()\n    let oldTodosCount = todos.length\n    todos = todos.filter(todo => todo.id !== id)\n    localStorage.setItem('todos', JSON.stringify(todos))\n\n    return oldTodosCount !== todos.length\n}\n\nexport default {\n    get: getTodos,\n    save: saveTodo,\n    delete: deleteTodo\n}\n","export default {\n    ALL: 'SHOW_ALL',\n    COMPLETED: 'SHOW_COMPLETED',\n    ACTIVE: 'SHOW_ACTIVE',\n}\n","import TodoApi from '../apis/todos'\nimport FilterTypes from '../constants/FilterTypes'\n\nexport default {\n    todos: TodoApi.get(),\n    filterType: FilterTypes.ALL\n}\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport filterTodos from './filterTodos'\n\nexport default combineReducers({\n    todos,\n    filterType: filterTodos\n})\n","import TodoApi from '../apis/todos'\nimport initialState from './initialState'\n\nexport default (todos = initialState.todos, action) => {\n    let todo\n    switch (action.type) {\n        case 'ADD':\n            todo = TodoApi.save({\n                id: null,\n                text: action.text,\n                completed: false\n            })\n\n            return [\n                ...todos,\n                todo\n            ]\n\n        case 'EDIT':\n            todo = TodoApi.save({\n                id: action.id,\n                text: action.text,\n                completed: false\n            })\n\n            return todos.map(\n                oldTodo => {\n                    return oldTodo.id === todo.id ? {...oldTodo, ...todo} : oldTodo\n                }\n            )\n\n        case 'DELETE':\n            let deleted = TodoApi.delete(action.id)\n\n            if (deleted) {\n                return todos.filter(todo => todo.id !== action.id)\n            }\n\n            return todos\n\n        case 'TOGGLE_STATUS':\n            return todos.map(\n                oldTodo => {\n                    let todo = oldTodo.id === action.id ? {...oldTodo, completed: !oldTodo.completed} : oldTodo\n                    TodoApi.save(todo)\n\n                    return todo\n                }\n            )\n        default:\n            return todos\n    }\n}\n","import initialState from './initialState'\n\nexport default (filterType = initialState.filterType, action) => {\n    switch (action.type) {\n        case 'FILTER':\n            return action.filterType\n\n        default:\n            return filterType\n    }\n}\n","import { createStore } from 'redux'\nimport reducers from './reducers'\n\nexport default createStore(reducers)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions/todos'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport AddIcon from '@material-ui/icons/AddCircleOutline'\n\nconst AddTodo = ({ dispatch }) => {\n    return (\n        <form onSubmit={e => {\n            e.preventDefault()\n            let input = e.currentTarget.todo\n            if (!input.value.trim()) {\n                return\n            }\n            dispatch(addTodo(input.value))\n            input.value = ''\n        }}>\n            <FormControl fullWidth>\n                <InputLabel htmlFor=\"todo-input\">New Todo</InputLabel>\n                <Input\n                    required\n                    variant=\"outlined\"\n                    id=\"todo-input\"\n                    name=\"todo\"\n                    endAdornment={\n                        <InputAdornment position=\"end\">\n                            <IconButton type=\"submit\">\n                                <AddIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    }\n                />\n            </FormControl>\n        </form>\n    )\n}\n\nexport default connect()(AddTodo)\n","export const addTodo = text => ({\n    type: 'ADD',\n    text\n})\n\nexport const editTodo = (id, text) => ({\n    type: 'EDIT',\n    id,\n    text\n})\n\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_STATUS',\n    id\n})\n\nexport const deleteTodo = id => ({\n    type: 'DELETE',\n    id\n})\n\nexport const filterTodo = filterType => ({\n    type: 'FILTER',\n    filterType\n})\n","import React from 'react'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport ListItem from '@material-ui/core/ListItem'\nimport IconButton from '@material-ui/core/IconButton'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport RemoveIcon from '@material-ui/icons/Close'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport withMobileDialog from '@material-ui/core/withMobileDialog'\nimport List from '@material-ui/core/List'\n\nclass Todo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            confirmDialogOpened: false,\n            isEditing: false,\n            todoText: props.text\n        }\n\n        this.todoInput = React.createRef()\n\n        this.openConfirmDialog = this.openConfirmDialog.bind(this)\n        this.closeConfirmDialog = this.closeConfirmDialog.bind(this)\n        this.editTodo = this.editTodo.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n        this.handleEditTodo = this.handleEditTodo.bind(this)\n        this.handleCheckboxClick = this.handleCheckboxClick.bind(this)\n    }\n\n    openConfirmDialog() {\n        this.setState({confirmDialogOpened: true});\n    }\n\n    closeConfirmDialog() {\n        this.setState({confirmDialogOpened: false});\n    }\n\n    editTodo() {\n        this.setState({ isEditing: true }, () => this.todoInput.current.focus())\n    }\n\n    cancelEdit() {\n        this.setState({\n            todoText: this.props.text,\n            isEditing: false\n        })\n        this.todoInput.current.value = this.props.text\n    }\n\n    handleEditTodo(event) {\n        // ESC\n        if (event.keyCode === 27) {\n            this.cancelEdit()\n        // Enter\n        } else if (event.keyCode === 13) {\n            let newText = this.todoInput.current.value\n            this.props.onEdit(newText)\n            this.setState({\n                todoText: newText,\n                isEditing: false\n            })\n        }\n    }\n\n    handleCheckboxClick(event) {\n        this.props.onClick()\n        event.stopPropagation()\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ListItem dense button onClick={this.editTodo}>\n                    <Checkbox\n                        checked={this.props.completed}\n                        onClick={this.handleCheckboxClick}\n                        tabIndex={-1}\n                        disableRipple\n                    />\n                    { this.state.isEditing\n                        ? <TextField\n                            fullWidth\n                            defaultValue={this.state.todoText}\n                            inputRef={this.todoInput}\n                            onBlur={this.cancelEdit}\n                            onKeyDown={this.handleEditTodo} />\n                        : <ListItemText primary={this.state.todoText} /> }\n                    <ListItemSecondaryAction>\n                        <IconButton aria-label=\"Delete\" onClick={this.openConfirmDialog}>\n                            <RemoveIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Dialog\n                    open={this.state.confirmDialogOpened}\n                    onClose={this.closeConfirmDialog}\n                    aria-labelledby=\"responsive-dialog-title\"\n                >\n                    <DialogTitle id=\"responsive-dialog-title\">Delete Todo?</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Are you sure you want to delete this todo?\n                        </DialogContentText>\n                        <List>\n                            <ListItem dense button selected>\n                                {this.state.todoText}\n                            </ListItem>\n                        </List>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.closeConfirmDialog} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.props.onClickDelete} color=\"secondary\" autoFocus>\n                            Yes\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withMobileDialog()(Todo)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Todo from '../components/Todo'\nimport { toggleTodo, deleteTodo, editTodo } from '../actions/todos'\n\nconst EditableTodo = ({ id, text, completed, dispatch }) => (\n    <Todo key={id}\n        id={id}\n        text={text}\n        completed={completed}\n        onClick={() => dispatch(toggleTodo(id))}\n        onClickDelete={() => dispatch(deleteTodo(id))}\n        onEdit={newText => dispatch(editTodo(id, newText))}\n    />\n)\n\nexport default connect()(EditableTodo)\n","import { connect } from 'react-redux'\nimport FilterTypes from '../constants/FilterTypes'\nimport TodoList from '../components/TodoList'\n\nconst filterTodos = (todos, filterType) => {\n    switch (filterType) {\n        case FilterTypes.ACTIVE:\n            return todos.filter(todo => !todo.completed)\n        case FilterTypes.COMPLETED:\n            return todos.filter(todo => todo.completed)\n        default:\n            return todos\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: filterTodos(state.todos, state.filterType)\n})\n\nexport default connect(mapStateToProps)(TodoList)\n","import React from 'react'\nimport List from '@material-ui/core/List'\nimport Todo from '../containers/EditableTodo'\n\nexport default ({ todos }) => (\n    <List>\n        {todos.map(todo => (\n            <Todo key={todo.id}\n                id={todo.id}\n                text={todo.text}\n                completed={todo.completed}\n            />\n        ))}\n    </List>\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { filterTodo } from '../actions/todos'\nimport FilterTypes from '../constants/FilterTypes'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FilterListIcon from '@material-ui/icons/FilterList'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Radio from '@material-ui/core/Radio'\n\nconst FilterButton = ({ filterType, onClick }) => (\n    <FormGroup row>\n        <RadioGroup row onChange={(e, value) => onClick(value)} value={filterType}>\n            <FormControlLabel\n                label=\"Filter\"\n                control={<Radio disabled icon={<FilterListIcon />} />}\n            />\n            <FormControlLabel\n                value={FilterTypes.ALL}\n                control={<Radio />}\n                label=\"All\"\n            />\n            <FormControlLabel\n                value={FilterTypes.ACTIVE}\n                control={<Radio />}\n                label=\"Active\"\n            />\n            <FormControlLabel\n                value={FilterTypes.COMPLETED}\n                control={<Radio />}\n                label=\"Completed\"\n            />\n        </RadioGroup>\n    </FormGroup>\n)\n\nconst mapStateToProps = state => ({ \n    filterType: state.filterType\n})\n\nconst mapDispatchToProps = dispatch => ({ \n    onClick: (filterType) => dispatch(filterTodo(filterType)) \n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterButton)\n","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport FilteredTodos from '../containers/FilteredTodos'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport AppBar from '@material-ui/core/AppBar'\nimport { withStyles } from '@material-ui/core/styles'\nimport FilterButtons from '../containers/FilterButtons'\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing.unit * 2,\n        marginTop: '10px'\n    },\n});\n  \n\nconst App = ({ classes }) => (\n    <div>\n        <CssBaseline />\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" color=\"inherit\">\n                    Todo List\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <Grid item xs={10} md={8} lg={7}>\n                <Paper className={classes.paper}>\n                    <AddTodo />\n                    <FilterButtons />\n                    <FilteredTodos />\n                </Paper>\n            </Grid>\n        </Grid>\n    </div>\n)\n\nexport default withStyles(styles)(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './styles/index.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}